
#include<unistd.h>
#include <stdio.h>
#include<stdint.h>
#include<stdlib.h>

int main (int argc, char * argv[]) {
	
	int pipe_to_child[2];
	int pipe_to_parent[2];

	pipe(pipe_to_child);
	pipe(pipe_to_parent);

	int pid_id = fork();

	if(pid_id == 0){
		close(pipe_to_child[1]);
		close(pipe_to_parent[0]);
		uint8_t counter;
		while(read(pipe_to_child[0], &counter, 1) > 0) {
			write(1, "DONG\n", 5);
			counter --;

			printf("child counter: %d\n", counter);
			if(counter == 0) {
				printf(">> child ends\n");
				close(pipe_to_child[0]);
				close(pipe_to_parent[1]);
				exit(0);
			}

			write(pipe_to_parent[1], &counter, 1); 
		}

	}

	write(1, "DING\n", 5);
	uint8_t counter = (uint8_t)atoi(argv[1]);
	
	write(pipe_to_child[1], &counter, 1);

	while(read(pipe_to_parent[0], &counter, 1) > 0 && counter > 0  ){
		write(1, "DING\n", 5);
		write(pipe_to_child[1], &counter, 1);
	}


	close(pipe_to_child[1]);
	close(pipe_to_parent[0]);
	


/*
	int child_end_status;
	//int counter = atoi(&argv[1]);
	uint8_t counter = (uint8_t)atoi(argv[1]);
	printf(">>> argv1 = %d \n", argv[1]);
	do {
		//if(counter == 0) {
		//	return;
		//}
		write(1, "DING\n", 5);
		
		printf("parent counter: %d\n", counter);

		write(pipe_to_child[1], &counter, 1);

	} while(read(pipe_to_parent[0], &counter, 1) > 0 );


*/

	printf(">>> parent end");
	//printf(">>> child status: %d\n",child_end_status); 
	exit(0);	
	
}
